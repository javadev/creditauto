package org.bitbucket.creditauto;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertEquals;

import org.junit.Test;

public class CreateDossierCarTest extends AbstractWebDriverTest {
    @Test public void createDossierCar() throws Exception {
selenium.open("/creditauto");
boolean loginPresent = selenium.isElementPresent("id=login");
// selenium.gotoIf("${loginPresent}", "doLogin");
if (!loginPresent) {
selenium.click("link=Выйти из системы");
selenium.waitForPageToLoad("90000");
}
// selenium.label("doLogin");
assertTrue(selenium.isTextPresent("Вход в систему"));
selenium.type("//input[@name='username']", "demo");
selenium.type("//input[@name='password']", "Qwerty+1");
selenium.type("id=logonForm:sap_bp_id", "00123");
selenium.click("id=login");
selenium.waitForPageToLoad("90000");
assertTrue(selenium.isTextPresent("Добро пожаловать, Demo User"));
// selenium.label("skipLogin");
assertTrue(selenium.isElementPresent("link=Создать заявку"));
selenium.click("link=Создать заявку");
selenium.waitForPageToLoad("90000");
selenium.select("partialId=in__goods_0_dictionary__carBrand__id", "label=Audi");
Thread.sleep(1500);
selenium.select("partialId=in__goods_0_dictionary__carModel__id", "label=A4");
selenium.type("partialId=in__goods_0_price__id", "120000");
selenium.type("partialId=in__dossier_down__payment__value__id", "40");
selenium.select("partialId=in__dossier_down__payment__calc__method__id", "label=Процент");
Thread.sleep(500);
selenium.click("id=next");
selenium.waitForPageToLoad("90000");
selenium.type("partialId=in__goods_0_car__body__number__id", "12345678901234567");
selenium.type("partialId=in__goods_0_car__issue__year__id", "2010");
selenium.type("partialId=in__goods_0_car__engine__volume__id", "1600");
selenium.click("partialId=in__goods_0_in__stock");
Thread.sleep(500);
selenium.click("id=next");
selenium.waitForPageToLoad("90000");
assertEquals("поле не должно быть пустым - не выбрано - Седан", selenium.getTable("css=div.section > fieldset > table.3.1"));
assertEquals("поле не должно быть пустым - не выбрано - Бензин Дизель Природний газ", selenium.getTable("css=div.section > fieldset > table.4.1"));
assertEquals("поле не должно быть пустым", selenium.getTable("css=div.section > fieldset > table.5.1"));
assertEquals("поле не должно быть пустым - не выбрано - Алый Бежево-красный металлик Бежево-розовый Бежевый Белая двухслойная Бело-желтый Белый Голубой Желто-зеленый Желтый Зелено-голубой Зелено-синий Зеленый Золотисто-зеленый Золотисто-серый Золотой Коричневый Красно-коричневый Красный Красный металлик Малиновый Моцарт Светло-бежевый Светло-желтый Светло-зеленый Светло-серый Серебристо-бежевый Серебристо-голубой Серебристо-зеленый Серебристо-золотой Серебристо-серый Серебристо-черный Серебристый Серебристый алый Серебристый желто-зеленый Серебристый зелено-голубой Серебристый коричнево-зеленый Серебристый красный Серебристый металлик Серебристый оранжевый Серебристый серо-зеленый Серебристый сине-зеленый Серебристый сине-фиолетовый Серебристый темно-бордовый Серебристый темно-зеленый Серебристый темно-красный Серебристый темно-синий Серебристый темно-фиолетовый Серебристый темный Серебристый фиолетовый Серебристый ярко-зеленый Серебристый ярко-синий Серо-бежевый Серо-бежевый металлик Серо-белый Серо-голубой Серо-зеленый Серо-зеленый металлик Серо-фиолетовый Сине-зеленый Синий Сливочно-белый Темно-бежевый Темно-бордовый Темно-голубой Темно-зеленый Темно-коричневый Темно-серый металлик Темно-синий Темный серо-синий Фиолетово-синий металлик Фиолетовый Черный Ярко-белый Ярко-синий Ярко-фиолетовый", selenium.getTable("css=div.section > fieldset > table.6.1"));
selenium.select("partialId=in__goods_0_dict__car__transmission__type__id", "label=автоматическая");
selenium.select("partialId=in__goods_0_dict__car__body__type__id", "label=Седан");
selenium.select("partialId=in__goods_0_dict__car__fuel__type__id", "label=Бензин");
selenium.type("partialId=in__goods_0_car__bundling__type__id", "Комплектация");
selenium.select("partialId=in__goods_0_dict__car__color__id", "label=Черный");
selenium.click("id=next");
selenium.waitForPageToLoad("90000");
assertTrue(selenium.isTextPresent("Выбор типа кредита"));
String downPayment = selenium.getValue("partialId=in__dossier_down__payment__id");
assertEquals("48000,00", selenium.getExpression(selenium.getEval("'" + downPayment + "'.replace(/\\D+/,'')")));
selenium.click("id=next");
selenium.waitForPageToLoad("90000");
selenium.select("partialId=in__dossier_credittype__id", "label=“Акція_24_15%”");
selenium.click("id=next");
selenium.waitForPageToLoad("90000");
assertTrue(selenium.isTextPresent("Персональные данные клиента"));
selenium.select("partialId=in__person_dictionary__gender__id", "label=Мужской");
selenium.type("partialId=in_person.last_name", "Фамилия");
selenium.type("partialId=in_person.first_name", "Имя");
selenium.type("partialId=in_person.patronymic_name", "Отчество");
selenium.type("partialId=in_person.birthday", "01011980");
selenium.type("partialId=in_person.birth_place", "Место рождения");
selenium.type("partialId=in_person.tin", "2345678902");
selenium.type("partialId=in_person.date_of_issue_tin_certificate", "01011996");
selenium.type("partialId=in_person.date_of_giving_tin_certificate", "01011997");
selenium.type("partialId=in_person.issuer_of_tin", "Кем выдан ИНН");
selenium.type("partialId=in_person.identity_document_number", "ОО345678");
selenium.type("partialId=in_person.date_of_issuing_identity_doc", "01011998");
selenium.type("partialId=in_person.issuer_of_identity_document", "Кем выдан паспорт");
selenium.click("id=next");
selenium.waitForPageToLoad("90000");
selenium.type("partialId=in_person.number_of_children", "2");
selenium.type("partialId=in_person.habit_situation_start_date", "01012009");
selenium.click("id=next");
selenium.waitForPageToLoad("90000");
assertTrue(selenium.isTextPresent("поле не должно быть пустым"));
selenium.select("partialId=in_person.dictionary_marital_status", "label=regexp:Женат\\s/\\sзамужем");
selenium.select("partialId=in_person.dictionary_habitation_situation", "label=regexp:Владелец\\sнедвижимости\\sвыплачивает\\sкредит");
selenium.click("id=next");
selenium.waitForPageToLoad("90000");
selenium.select("partialId=in_person.dictionary_regprovince", "label=Київська");
Thread.sleep(1000);
selenium.select("partialId=in_person.dictionary_regregion", "label=Києво-Святошинський");
Thread.sleep(1000);
selenium.select("partialId=in_person.dictionary_regcity", "label=Гатне");
Thread.sleep(500);
selenium.type("partialId=in_person.regstreet", "Улица");
selenium.type("partialId=in_person.reghouse", "12");
selenium.type("partialId=in_person.regflat", "23");
selenium.select("partialId=in_person.dictionary_mailprovince", "label=Вінницька");
Thread.sleep(1500);
selenium.select("partialId=in_person.dictionary_mailregion", "label=Гайсинський");
Thread.sleep(1000);
selenium.select("partialId=in_person.dictionary_mailcity", "label=Гайсин 1");
Thread.sleep(500);
selenium.type("partialId=in_person.mailstreet", "Улица 2");
selenium.type("partialId=in_person.mailhouse", "45");
selenium.type("partialId=in_person.mailflat", "56");
selenium.click("id=next");
selenium.waitForPageToLoad("90000");
assertTrue(selenium.isTextPresent("Трудовая деятельность клиента"));
selenium.select("id=in__person_dict__level__of__education__ida0", "label=Высшее");
selenium.select("id=in__person_dict__activity__sector__ida2", "label=Комерческий сектор");
selenium.click("css=#in__person_dict__activity__sector__ida2 > option[value=\"2\"]");
selenium.select("id=in__person_dict__type__of__activity__spd__ida4", "label=Государственные структуры, органы госуправления");
selenium.click("css=#in__person_dict__type__of__activity__spd__ida4 > option[value=\"1\"]");
selenium.select("id=in__person_dict__profession__ida6", "label=Администратор");
selenium.click("css=#in__person_dict__profession__ida6 > option[value=\"1\"]");
selenium.select("id=in__person_dict__employment__type__ida8", "label=Без срока окончания");
selenium.click("css=#in__person_dict__employment__type__ida8 > option[value=\"0\"]");
selenium.type("id=in__person_start__employment__date__idaa", "01012009");
selenium.type("id=in__person_employer__idae", "гос. компания");
selenium.select("id=in__person_dict__empl__regprovince__idb0", "label=Київська");
Thread.sleep(1500);
selenium.select("id=in__person_dict__empl__regregion__idb2", "label=Київ");
Thread.sleep(1000);
selenium.select("id=in__person_dict__empl__regcity__idb4", "label=КИЇВ");
Thread.sleep(500);
selenium.select("id=in__person_dict__empl__regcity__idb4", "label=Київ 134");
selenium.type("id=in__person_empl__regstreet__idb8", "пр. Московский");
selenium.type("id=in__person_empl__reghouse__idba", "23");
selenium.type("id=in__person_phone__of__employer__idc0", "0444020202");
selenium.select("id=in__person_dict__type__employer__by__size__idc4", "label=Большая компания");
selenium.type("id=in__person_prev__employer__name__idc8", "гос. компания 2");
selenium.type("id=in__person_prev__employer__num__years__experience__idca", "3");
selenium.type("id=in__person_number__of__years__of__experience__idcc", "5");
selenium.select("id=in__person_number__of__months__of__experience__idce", "label=00");
selenium.click("id=next");
selenium.waitForPageToLoad("90000");
selenium.type("partialId=in_person.gross_income", "1000");
selenium.type("partialId=in_person.other_income", "2000");
selenium.type("partialId=in_person.expenses_for_renting", "3000");
selenium.type("partialId=in_person.expenses_for_car_loan", "4000");
selenium.type("partialId=in_person.expenses_for_other_loans", "5000");
selenium.type("partialId=in_person.expenses_for_alimony", "6000");
selenium.click("id=next");
selenium.waitForPageToLoad("90000");
assertTrue(selenium.isTextPresent("Собственность клиента"));
selenium.select("partialId=dictionary_asset_id", "label=автомобиль");
selenium.type("partialId=in_assets.0.count_of", "1");
selenium.click("id=next");
selenium.waitForPageToLoad("90000");
assertTrue(selenium.isTextPresent("Контактная информация клиента"));
selenium.type("partialId=in_person.mobile_phone", "0675010101");
selenium.type("partialId=in_person.email", "test@mail.com");
selenium.type("partialId=in_person.last_name_latin", "Familia");
selenium.type("partialId=in_person.first_name_latin", "Imia");
selenium.click("id=next");
selenium.waitForPageToLoad("90000");
assertTrue(selenium.isTextPresent("Информация о третьем лице:"));
selenium.type("partialId=in_third_person.last_name", "Петров");
selenium.type("partialId=in_third_person.first_name", "Иван");
selenium.type("partialId=in_third_person.patronymic_name", "ИИванович");
selenium.type("partialId=in_third_person.phone", "0444020202");
selenium.click("id=next");
selenium.waitForPageToLoad("90000");
assertTrue(selenium.isTextPresent("Анкета-заявление"));
selenium.click("id=print-application-form");
Thread.sleep(1000);
selenium.click("id=next");
selenium.waitForPageToLoad("90000");
selenium.click("partialId=is_application_form_signed");
selenium.click("id=next");
selenium.waitForPageToLoad("90000");
assertTrue(selenium.isTextPresent("Требуемые Скан-копии документов"));
assertTrue(selenium.isTextPresent("Паспорт клиента"));
assertTrue(selenium.isTextPresent("ИНН клиента"));
assertTrue(selenium.isTextPresent("Фото клиента"));
//selenium.attachFile("partialId=in_document_stores.0.data", getClass().getResource("passport.jpg").toString());
//selenium.attachFile("partialId=in_document_stores.1.data", getClass().getResource("pin.jpg").toString());
//selenium.attachFile("partialId=in_document_stores.2.data", getClass().getResource("photo_client.jpg").toString());
//selenium.click("id=next");
//selenium.waitForPageToLoad("90000");
//selenium.click("partialId=in__dossier_preview__documents__id");
//selenium.click("id=next");
//selenium.waitForPageToLoad("90000");
//assertTrue(selenium.isTextPresent("Ваш запрос отправлен на обработку"));
// logout
selenium.click("link=Выйти из системы");
selenium.waitForPageToLoad("90000");
assertTrue(selenium.isTextPresent("Вход в систему"));
    }
}
